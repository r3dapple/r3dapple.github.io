#define BOOST_TEST_MODULE BigIntegerTestBitAnd
#include <boost/test/unit_test.hpp>

#include "../src/biginteger/biginteger.hpp"

//Ground truth for calculation is http://www.convertalot.com/bitwise_operators.html


// check group axioms https://en.wikipedia.org/wiki/Group_(mathematics)
// identity element
// wont check -0 here since that has been tested to equal 0 in constructor tests
BOOST_AUTO_TEST_SUITE(IDENTITY_ELEMENT) //https://www.boost.org/doc/libs/1_65_0/libs/test/doc/html/boost_test/tests_organization/test_suite.html
BOOST_AUTO_TEST_CASE(BITWISEAND_ZERO_LENGTH1_184_LENGTH2_1_SIGN1_PLUS_SIGN2_PLUS)
{
    BigInteger b("7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    b.bitAnd("0");
    BOOST_CHECK_EQUAL(b.getNumber(), "0");
}
BOOST_AUTO_TEST_CASE(BITWISEAND_ZERO_LENGTH1_1_LENGTH2_184_SIGN1_PLUS_SIGN2_PLUS)
{
    BigInteger b("0");
    b.bitAnd("7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    BOOST_CHECK_EQUAL(b.getNumber(), "0");
}
BOOST_AUTO_TEST_CASE(BITWISEAND_ZERO_LENGTH1_184_LENGTH2_1_SIGN1_MINUS_SIGN2_PLUS)
{
    BigInteger b("-7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    b.bitAnd("0");
    BOOST_CHECK_EQUAL(b.getNumber(), "0");
}
BOOST_AUTO_TEST_CASE(BITWISEAND_ZERO_LENGTH1_1_LENGTH2_184_SIGN1_PLUS_SIGN2_MINUS)
{
    BigInteger b("0");
    b.bitAnd("-7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    BOOST_CHECK_EQUAL(b.getNumber(), "0");
}
BOOST_AUTO_TEST_SUITE_END()

// inverse element
BOOST_AUTO_TEST_SUITE(INVERSE_ELEMENT)
BOOST_AUTO_TEST_CASE(BITWISEAND_INVERSE_LENGTH1_184_LENGTH2_184_SIGN1_PLUS_SIGN2_MINUS)
{
    BigInteger b("7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    b.bitAnd("-7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    BOOST_CHECK_EQUAL(b.getNumber(), "7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
}
BOOST_AUTO_TEST_CASE(BITWISEAND_INVERSE_LENGTH1_184_LENGTH2_184_SIGN1_MINUS_SIGN2_PLUS)
{
    BigInteger b("-7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    b.bitAnd("7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    BOOST_CHECK_EQUAL(b.getNumber(), "-7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
}
BOOST_AUTO_TEST_SUITE_END()

// equal number (doesnt have anything to do with the inverse element)
BOOST_AUTO_TEST_SUITE(EQUAL_NUMBER)
BOOST_AUTO_TEST_CASE(BITWISEAND_EQUAL_LENGTH1_184_LENGTH2_184_SIGN1_PLUS_SIGN2_PLUS)
{
    BigInteger b("7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    b.bitAnd("7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    BOOST_CHECK_EQUAL(b.getNumber(), "7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
}
BOOST_AUTO_TEST_CASE(BITWISEAND_EQUAL_LENGTH1_184_LENGTH2_184_SIGN1_MINUS_SIGN2_MINUS)
{
    BigInteger b("-7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    b.bitAnd("-7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
    BOOST_CHECK_EQUAL(b.getNumber(), "-7941336097231331222328305438625646002846406186146402399842122390970234239963370898300943198440768677925436553855703282917116959906917075742261367262117888460342170898243453976126509330");
}
BOOST_AUTO_TEST_SUITE_END()

// inequal length
BOOST_AUTO_TEST_SUITE(INEQUAL_LENGTH)
BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_6_LENGTH2_7_SIGN1_PLUS_SIGN2_PLUS)
{
    BigInteger b("213421");
    b.bitAnd("3245231");
    BOOST_CHECK_EQUAL(b.getNumber(), "65709");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_7LENGTH2_6_SIGN1_PLUS_SIGN2_PLUS)
{
    BigInteger b("3245231");
    b.bitAnd("213421");
    BOOST_CHECK_EQUAL(b.getNumber(), "65709");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_6_LENGTH2_7_SIGN1_MINUS_SIGN2_PLUS)
{
    BigInteger b("-213421");
    b.bitAnd("3245231");
    BOOST_CHECK_EQUAL(b.getNumber(), "-65709");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_6_LENGTH2_7_SIGN1_PLUS_SIGN2_MINUS)
{
    BigInteger b("213421");
    b.bitAnd("-3245231");
    BOOST_CHECK_EQUAL(b.getNumber(), "65709");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_7_LENGTH2_6_SIGN1_MINUS_SIGN2_PLUS)
{
    BigInteger b("-3245231");
    b.bitAnd("213421");
    BOOST_CHECK_EQUAL(b.getNumber(), "-65709");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_7_LENGTH2_6_SIGN1_PLUS_SIGN2_MINUS)
{
    BigInteger b("3245231");
    b.bitAnd("-213421");
    BOOST_CHECK_EQUAL(b.getNumber(), "65709");
}
BOOST_AUTO_TEST_SUITE_END()

// equal length
BOOST_AUTO_TEST_SUITE(EQUAL_LENGTH)
BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_10_LENGTH2_10_SIGN1_PLUS_SIGN2_PLUS)
{
    BigInteger b("2183421234");
    b.bitAnd("8923465272");
    BOOST_CHECK_EQUAL(b.getNumber(), "35669040");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_10_LENGTH2_10_SIGN1_PLUS_SIGN2_PLUS_SWAPPED)
{
    BigInteger b("8923465272");
    b.bitAnd("2183421234");
    BOOST_CHECK_EQUAL(b.getNumber(), "35669040");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_300_LENGTH2_300_SIGN1_MINUS_SIGN2_PLUS)
{
    BigInteger b("-2183421234");
    b.bitAnd("8923465272");
    BOOST_CHECK_EQUAL(b.getNumber(), "-35669040");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_300_LENGTH2_300_SIGN1_PLUS_SIGN2_MINUS)
{
    BigInteger b("2183421234");
    b.bitAnd("-8923465272");
    BOOST_CHECK_EQUAL(b.getNumber(), "35669040");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_300_LENGTH2_300_SIGN1_MINUS_SIGN2_PLUS_SWAPPED)
{
    BigInteger b("-8923465272");
    b.bitAnd("2183421234");
    BOOST_CHECK_EQUAL(b.getNumber(), "-35669040");
}

BOOST_AUTO_TEST_CASE(BITWISEAND_LENGTH1_300_LENGTH2_300_SIGN1_PLUS_SIGN2_MINUS_SWAPPED)
{
    BigInteger b("8923465272");
    b.bitAnd("-2183421234");
    BOOST_CHECK_EQUAL(b.getNumber(), "35669040");
}
BOOST_AUTO_TEST_SUITE_END()
