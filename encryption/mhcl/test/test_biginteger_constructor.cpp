#define BOOST_TEST_MODULE BigIntegerTestConstructor
#include <boost/test/unit_test.hpp>
#include "../src/biginteger/biginteger.hpp"

// constructors
BOOST_AUTO_TEST_SUITE(USE_CASES)
BOOST_AUTO_TEST_CASE(STRING_CONSTRUCTOR_POSITIVE)
{
    BigInteger b("123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789");
    BOOST_CHECK_EQUAL(b.getNumber(), "123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789");
}

BOOST_AUTO_TEST_CASE(STRING_CONSTRUCTOR_ZERO_WITH_MINUS_SIGN)
{
    BigInteger b("-0");
    BOOST_CHECK_EQUAL(b.getNumber(), "0");
}

BOOST_AUTO_TEST_CASE(STRING_CONSTRUCTOR_NEGATIVE)
{
    BigInteger b("-123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789");
    BOOST_CHECK_EQUAL(b.getNumber(), "-123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789");
}

BOOST_AUTO_TEST_CASE(INT_CONSTRUCTOR_POSITIVE)
{
    BigInteger bi(123456789);
    BigInteger bs("123456789");
    BOOST_CHECK_EQUAL(bi.getNumber(), bs.getNumber());
}

BOOST_AUTO_TEST_CASE(INT_CONSTRUCTOR_ZERO_WITH_MINUS_SIGN)
{
    BigInteger bi(-0);
    BigInteger bs("0");
    BOOST_CHECK_EQUAL(bi.getNumber(), bs.getNumber());
}

BOOST_AUTO_TEST_CASE(INT_CONSTRUCTOR_NEGATIVE)
{
    BigInteger bi(-123456789);
    BigInteger bs("-123456789");
    BOOST_CHECK_EQUAL(bi.getNumber(), bs.getNumber());
}

BOOST_AUTO_TEST_CASE(LONG_CONSTRUCTOR_POSITIVE)
{
    BigInteger bl(123456789123456789);
    BigInteger bs("123456789123456789");
    BOOST_CHECK_EQUAL(bl.getNumber(), bs.getNumber());
}

BOOST_AUTO_TEST_CASE(LONG_CONSTRUCTOR_NEGATIVE)
{
    BigInteger bl(-123456789123456789);
    BigInteger bs("-123456789123456789");
    BOOST_CHECK_EQUAL(bl.getNumber(), bs.getNumber());
}

BOOST_AUTO_TEST_CASE(EMTPY_CONSTRUCTOR)
{
    BigInteger be;
    BOOST_CHECK_EQUAL(be.getNumber(), "0");
}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE(MISUSE_CASES)
BOOST_AUTO_TEST_CASE(STRING_CONSTRUCTOR_NON_DIGIT_STRING)
{
    BigInteger b("jlgjhjwa39rf iuosfah 4980rq9wüef0i f4309tßrpüfg#+grew+gad.cx-v g09ß34egp");
    BOOST_CHECK_EQUAL(b.getNumber(), "0");
}

BOOST_AUTO_TEST_CASE(STRING_CONSTRUCTOR_FLOATIING_POINT)
{
    BigInteger b("23543765.435");
    BOOST_CHECK_EQUAL(b.getNumber(), "0");
}

BOOST_AUTO_TEST_CASE(STRING_CONSTRUCTOR_COMMA_FLOATIING_POINT)
{
    BigInteger b("23543765,435");
    BOOST_CHECK_EQUAL(b.getNumber(), "0");
}
BOOST_AUTO_TEST_SUITE_END()
